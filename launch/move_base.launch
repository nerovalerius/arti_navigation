<!-- http://wiki.ros.org/navigation/Tutorials/RobotSetup -->
<launch>

   <!-- current best setup is running google cartographer with an 2d laserscan, which is created by the pointcloud2laserscan node from the 3d lidar data-->
   <!-- Handling Parameters -->
   <arg name="gmapping" default="false" />
   <arg name="cartographer" default="true" />
   <arg name="rviz" default="true" />
   <arg name="map" default="true" />
   <arg name="ekf" default="true" />
   <arg name="rxt" default="true" />  <!-- stuff that is only required in ROBxTASK project (use with -> node if="$(arg map)") -->

   <!-- Run Transformations and OS Lidar -->
   <include file="$(find arti_navigation)/launch/arti_with_os1.launch">
      <arg name="rviz" value="$(arg rviz)" />
   </include>

   <!-- Run Transformations and 3D Cam -->
   <include file="$(find arti_navigation)/launch/start_3d_cam.launch" >
   </include>

   <!-- Run the map server with a given map --> 
   <!--node if="$(arg map)" name="map_server" pkg="map_server" type="map_server" args="$(find arti_navigation)/maps/robxtask_1.yaml"/-->

   <!--- Run AMCL --> 
   <!--include file="$(find amcl)/examples/amcl_omni.launch" /-->
   <!--include file="$(find amcl)/examples/amcl_diff.launch" /-->

   <!-- Gmapping -->
   <group if="$(arg gmapping)">
      <include file="$(find arti_navigation)/launch/pointcloud_to_laserscan.launch"/>
      <include file="$(find arti_navigation)/launch/arti_gmapping.launch"/>
   </group>

    <!-- Only need LaserScan if using the EKF -->
   <group if="$(arg ekf)">
      <!-- Laser Scan Matcher -->
      <include file="$(find arti_navigation)/launch/laser_scan_matcher.launch"/>

      <!-- Fake laser-->
      <include file="$(find arti_navigation)/launch/pointcloud_to_laserscan.launch"/>

      <!-- IMU Complimentary Filter -->
      <node name="imu_complementary_filter" pkg="imu_complementary_filter" type="complementary_filter_node">
         <remap from="imu/data_raw" to="/os_cloud_node/imu" />
         <param name="fixed_frame" value="odom"/> 
         <param name="publish_tf" value="false"/> 
         <param name="publish_debug_topics" value="false"/> 
      </node>
   </group>

   <!-- Cartographer -->
   <group if="$(arg cartographer)">
      <include file="$(find arti_navigation)/launch/arti_cartographer.launch">
         <arg name="record" value="false" />
         <arg name="rviz" value="false" />
         <arg name="replay" value="false" />
         <arg name="map" value="true" />
         <arg name="octomap" value="false" />
         <arg name="hector" value="false" />
      </include>
   </group>

   <!-- Load move base with our defined costmap and trajectory planning parameters  -->
   <node pkg="move_base" type="move_base" name="move_base" output="screen">
      <rosparam file="$(find arti_navigation)/config/common_costmap_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find arti_navigation)/config/common_costmap_params.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find arti_navigation)/config/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find arti_navigation)/config/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find arti_navigation)/config/base_local_planner_params.yaml" command="load" />
      <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS"/>
      <!--param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" /-->
      <!--param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS" /-->
      <param name="controller_frequency" value="5.0"/>

          <!-- LOAD COSTMAP_CONVERTER PARAMETERS HERE -->
    <rosparam file="$(find arti_navigation)/config/costmap_converter_params.yaml" command="load" />
   </node>


</launch>
