# http://wiki.ros.org/navigation/Tutorials/RobotSetup
# The navigation stack uses costmaps to store information about obstacles in the world.
# In order to do this properly, we'll need to point the costmaps at the sensor topics they should listen to for updates.

# determines the maximum range sensor reading that will result in an obstacle being put into the costmap
obstacle_range: 2.5 
# the robot will attempt to clear out space in front of it up to X.X meters away given a sensor reading
raytrace_range: 3.0

footprint: [[x0, y0], [x1, y1], ... [xn, yn]]
#robot_radius: ir_of_robot

# the robot will treat all paths that stay X.X meters or more away from obstacles as having equal obstacle cost. 
inflation_radius: 0.55

# defines a list of sensors that are going to be passing information to the costmap 
observation_sources: laser_scan_sensor point_cloud_sensor

# Each sensor is defined in the next lines. 
laser_scan_sensor: {sensor_frame: frame_name, data_type: LaserScan, topic: topic_name, marking: true, clearing: true}

point_cloud_sensor: {sensor_frame: frame_name, data_type: PointCloud, topic: topic_name, marking: true, clearing: true}