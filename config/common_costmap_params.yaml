# http://wiki.ros.org/navigation/Tutorials/RobotSetup
# The navigation stack uses costmaps to store information about obstacles in the world.
# In order to do this properly, we'll need to point the costmaps at the sensor topics they should listen to for updates.

# determines the maximum range sensor reading that will result in an obstacle being put into the costmap
obstacle_range: 4.0 
# the robot will attempt to clear out space in front of it up to X.X meters away given a sensor reading
raytrace_range: 10.0
inf_is_valid: true

# topic where occupancy grid is published.
#map_topic: /map

# defines if move_base should periodically check if map was updated.
#subscribe_to_updates: true

# defines coordinate frame tied to occupancy grid map.
#global_frame: map

# defines coordinate frame tied to robot.
#robot_base_frame: base_link

# defines if costmap should be always published with complete data.
#always_send_full_costmap: true

# ARTI: 800 mm x 600 mm - defines coordinates of robot outline, this will considered during collision detecting.
footprint: [[0.65, 0.3], [0.65, -0.3], [-0.15, -0.3], [-0.15, 0.3]]
footprint_padding: 0.0

#robot_radius: ir_of_robot

# defines a list of sensors that are going to be passing information to the costmap - a list of sensors with space between them
observation_sources: lidar camera 

# Each sensor is defined in the next lines. 
# sensor_frame - coordinate frame tied to sensorx
# data_type - type of message published by sensor
# topic - name of topic where sensor data is published
# marking - true if sensor can be used to mark area as occupied
# clearing - true if sensor can be used to mark area as clear
#laser_scan_sensor: {sensor_frame: os_sensor, data_type: LaserScan, topic: /scan, marking: true, clearing: true}

lidar: {sensor_frame: os_sensor, data_type: PointCloud2, topic: /os_cloud_node/points, marking: true, clearing: true} #, max_obstacle_height: 0.5, min_obstacle_height: 0.03
camera: {sensor_frame: cam_front_link, data_type: PointCloud2, topic: /cam_front/depth/color/points, marking: true, clearing: true} #, max_obstacle_height: 0.5, min_obstacle_height: 0.03
